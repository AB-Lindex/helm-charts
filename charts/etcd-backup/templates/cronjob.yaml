apiVersion: batch/v1
kind: CronJob
metadata:
  name: etcd-backup
  labels:
    app.kubernetes.io/name: {{ include "etcd-backup.name" . }}
    helm.sh/chart: {{ include "etcd-backup.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  schedule: "{{ .Values.schedule }}"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: {{ include "etcd-backup.name" . }}
            helm.sh/chart: {{ include "etcd-backup.chart" . }}
            app.kubernetes.io/instance: {{ .Release.Name }}
            app.kubernetes.io/managed-by: {{ .Release.Service }}
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: node-role.kubernetes.io/control-plane
                    operator: Exists
          tolerations:
          - key: "node-role.kubernetes.io/control-plane"
            operator: "Exists"
            effect: "NoSchedule"
          - key: "node-role.kubernetes.io/master"
            operator: "Exists"
            effect: "NoSchedule"
          {{- if .Values.s3.enabled }}
          initContainers:
          - name: etcd-backup
            image: "{{ .Values.backup.etcdBackupImage }}"
            command:
            - /bin/sh
            - -c
            - |
              ETCDCTL_API=3 etcdctl snapshot save /backup/snapshot.db \
                --endpoints=https://${HOST_IP}:2379 \
                --cacert=/etc/etcd/pki/ca.crt \
                --cert=/etc/etcd/pki/server.crt \
                --key=/etc/etcd/pki/server.key
              tar -czvf /backup/snapshot-$(date +\%F-%H-%M-%S).tar.gz -C /backup snapshot.db --remove-files
              {{- if .Values.backup.rotateOnDisk }}
              find /backup -type f -name 'snapshot-*.tar.gz' | sort | head -n -{{ .Values.backup.keepOnDiskCount }} | xargs rm -f
              {{- end }}
            env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            volumeMounts:
            - name: etcd-certs
              mountPath: /etc/etcd/pki
              readOnly: true
            - name: backup
              mountPath: /backup
          containers:
          - name: s3-upload
            image: "{{ .Values.s3.awsCliImage }}"
            command:
            - /bin/sh
            - -c
            - |
              aws configure set aws_access_key_id $S3_ACCESS_KEY
              aws configure set aws_secret_access_key $S3_SECRET_KEY
              aws configure set default.region us-east-1
              aws configure set default.s3.signature_version s3v4

              # Sync backups
              aws --endpoint-url $(cat /etc/config/S3_ENDPOINT_URL) s3 sync /backup s3://{{ .Values.s3.bucketName }}/etcd-backups/

              {{- if .Values.s3.rotateInS3 }}
              # Rotate S3 backups
              aws --endpoint-url $(cat /etc/config/S3_ENDPOINT_URL) s3 ls s3://{{ .Values.s3.bucketName }}/etcd-backups/ | awk '{print $4}' | sort | head -n -{{ .Values.s3.keepInS3Count }} | xargs -I {} aws --endpoint-url $(cat /etc/config/S3_ENDPOINT_URL) s3 rm s3://{{ .Values.s3.bucketName }}/etcd-backups/{}
              {{- end }}
            env:
            - name: S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.s3.secretName }}
                  key: S3_ACCESS_KEY
            - name: S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.s3.secretName }}
                  key: S3_SECRET_KEY
            volumeMounts:
            - name: backup
              mountPath: /backup
            - name: config
              mountPath: /etc/config
          {{- else }}
          containers:
          - name: etcd-backup
            image: "{{ .Values.backup.etcdBackupImage }}"
            command:
            - /bin/sh
            - -c
            - |
              ETCDCTL_API=3 etcdctl snapshot save /backup/snapshot.db --endpoints=https://${HOST_IP}:2379 --cacert=/etc/etcd/pki/ca.crt --cert=/etc/etcd/pki/server.crt --key=/etc/etcd/pki/server.key
              tar -czvf /backup/snapshot-$(date +\%F-%H-%M-%S).tar.gz -C /backup snapshot.db --remove-files
              {{- if .Values.backup.rotateOnDisk }}
              find /backup -type f -name 'snapshot-*.tar.gz' | sort | head -n -{{ .Values.backup.keepOnDiskCount }} | xargs rm -f
              {{- end }}
            env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            volumeMounts:
            - name: etcd-certs
              mountPath: /etc/etcd/pki
              readOnly: true
            - name: backup
              mountPath: /backup
          {{- end }}
          volumes:
          - name: etcd-certs
            hostPath:
              path: {{ .Values.hostPaths.etcdCerts }}
              type: DirectoryOrCreate
          - name: backup
            {{- if .Values.backup.pvc.enabled }}
            persistentVolumeClaim:
              claimName: {{ .Values.backup.claimName }}
            {{- else if .Values.backup.customPV.enabled }}
            persistentVolumeClaim:
              claimName: {{ .Values.backup.claimName }}
            {{- else if .Values.backup.hostPath.enabled }}
            hostPath:
              path: {{ .Values.backup.hostPath.path }}
              type: DirectoryOrCreate
            {{- else }}
            emptyDir: {}
            {{- end }}
          - name: config
            configMap:
              name: etcd-backup-config
          restartPolicy: OnFailure

